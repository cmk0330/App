//apply plugin: 'com.android.application'
//apply plugin: 'kotlin-android'
//apply plugin: 'kotlin-kapt'
//apply plugin: 'kotlin-android-extensions'
//apply plugin: "androidx.navigation.safeargs.kotlin"
plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-android-extensions'
    id 'androidx.navigation.safeargs.kotlin'
    id 'dagger.hilt.android.plugin'
}
//apply from: 'tinker-support.gradle'
//apply plugin: "com.tencent.android.tpns"
//apply plugin: 'com.huawei.agconnect'

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.2'
    defaultConfig {
        applicationId "com.cmk.app"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // 使用support.v8.renderscript
        renderscriptTargetApi 29
        renderscriptSupportModeEnabled true

        // 适配指定CPU架构
        ndk {
            abiFilters 'armeabi', 'arm64-v8a', 'armeabi-v7a', 'x86'
        }
    }

    useLibrary 'org.apache.http.legacy'

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerVersion "1.4.31"
        kotlinCompilerExtensionVersion "1.0.0-beta02"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding { enabled = true }
    viewBinding { enabled = true }

    signingConfigs {
        debug {
//            v1SigningEnabled true
//            v2SigningEnabled true
            setSigningPropertiesDebug()
        }
        release {
            setSigningProperties()
        }
    }

    // 需要开启java8，因为新的库都是基于8进行编译的。。。
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
//
//    kotlinOptions {
//        jvmTarget = JavaVersion.VERSION_1_8
//    }

    packagingOptions {
        exclude 'assets/location_map_gps_locked.png'
        exclude 'assets/location_map_gps_3d.png'
    }
}

def setSigningProperties() {
//    v1SigningEnabled true
//    v2SigningEnabled true

    def propFile = file('../keystore/keystore.properties')
    if (propFile.canRead()) {
        Properties props = new Properties()
        props.load(new FileInputStream(propFile))
        if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') && props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            throw new Exception("some key missing")
        }
    } else {
        throw new Exception("keystore.properties not found:" + propFile.absolutePath)
    }
}

def setSigningPropertiesDebug() {
//    v1SigningEnabled true
//    v2SigningEnabled true

    def propFile = file('../keystore/keystore.properties')
    if (propFile.canRead()) {
        Properties props = new Properties()
        props.load(new FileInputStream(propFile))
        if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') && props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            android.signingConfigs.debug.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.debug.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.debug.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.debug.keyPassword = props['KEY_PASSWORD']
        } else {
            throw new Exception("some key missing")
        }
    } else {
        throw new Exception("keystore.properties not found:" + propFile.absolutePath)
    }
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.7'
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: "$kotlin_version"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    /** compose */
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling:$compose_version"
    implementation "androidx.activity:activity-compose:1.3.0-alpha04"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:1.0.0-alpha02"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$compose_version"
    implementation "androidx.compose.foundation:foundation:$compose_version"
    implementation "androidx.compose.foundation:foundation-layout:$compose_version"
    implementation "androidx.compose.material:material-icons-extended:$compose_version"
    implementation "androidx.navigation:navigation-compose:1.0.0-alpha08"
    implementation "androidx.paging:paging-compose:1.0.0-alpha08"
    implementation 'com.squareup.retrofit2:converter-simplexml:2.9.0'

//    implementation 'androidx.arch.core:core-common:2.1.0'
//    implementation 'org.jetbrains.kotlin:kotlin-android-extensions-runtime:1.3.61'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    kapt 'androidx.annotation:annotation:1.1.0'
    def core_version = "1.3.2"
    implementation "androidx.core:core-ktx:$core_version"
    def appcompat_version = "1.2.0"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    def fragment_version = "1.3.0-beta01"
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
    def activity_version = "1.2.0-beta01"
    implementation "androidx.activity:activity-ktx:$activity_version"
    /**jetpack**/
    def lifecycle_version = "2.3.1"
    def arch_version = "2.3.0-beta01"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    //noinspection LifecycleAnnotationProcessorWithJava8
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"
//    testImplementation "androidx.arch.core:core-testing:$arch_version"
//    def paging_version = '2.1.2'
//    implementation "androidx.paging:paging-runtime-ktx:$paging_version"
//    testImplementation "androidx.paging:paging-common-ktx:$paging_version"
    def paging_version = "3.0.0-beta02"
    implementation "androidx.paging:paging-runtime:$paging_version"
    testImplementation "androidx.paging:paging-common:$paging_version"
    def room_version = "2.2.5"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
//    implementation 'android.arch.persistence.room:runtime:1.1.1'
//    annotationProcessor 'android.arch.persistence.room:compiler:1.1.1'
//    kapt 'android.arch.persistence.room:compiler:1.1.1'
    def work_version = "2.4.0"
    implementation "androidx.work:work-runtime-ktx:$work_version"
    implementation "androidx.work:work-gcm:$work_version"
    androidTestImplementation "androidx.work:work-testing:$work_version"
    def nav_version = '2.3.1'
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    /**依赖注入**/
    def koin_version = '2.1.5'
    implementation "org.koin:koin-androidx-ext:$koin_version"
    implementation "org.koin:koin-androidx-scope:$koin_version"
    implementation "org.koin:koin-androidx-viewmodel:$koin_version"
    implementation "org.koin:koin-androidx-fragment:$koin_version"
    implementation 'androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha01'
    kapt 'androidx.hilt:hilt-compiler:1.0.0-alpha01'
    implementation "com.google.dagger:hilt-android:2.28-alpha"
    kapt "com.google.dagger:hilt-android-compiler:2.28-alpha"
    /**组件**/
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.recyclerview:recyclerview:1.2.0-alpha06'
    implementation "androidx.cardview:cardview:1.0.0"
    implementation 'androidx.viewpager2:viewpager2:1.0.0'
    implementation "androidx.viewpager:viewpager:1.0.0"
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.2'
    implementation 'androidx.transition:transition:1.3.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    //动画库
    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0'
    kapt 'com.github.bumptech.glide:compiler:4.11.0'
    /** rxjava, retrofit, okhttp **/
//    implementation 'com.squareup.retrofit2:retrofit-adapters:2.6.1'
    //kotlin 推荐使用moshi解析json
    def okhttp3_version = '4.7.2'
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp3_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp3_version"
    def retrofit2_version = '2.9.0'
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit2_version"
    implementation "com.squareup.retrofit2:retrofit-converters:2.8.1"
    implementation "com.squareup.retrofit2:retrofit:$retrofit2_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit2_version"
    implementation 'com.squareup.okio:okio:2.6.0'

    /**-------------------------------------第三方------------------------------------------------**/
    /** 推送 tpns **/
//    implementation 'com.tencent.tpns:huawei:v3-1.0.0.0-release'// 适用于 HMS Core 版本的 TPNS 插件
//    implementation 'com.huawei.hms:push:5.0.2.300'
    implementation 'com.githang:status-bar-compat:0.7'
    implementation 'com.jaeger.statusbarutil:library:1.5.1'
    implementation 'com.github.pinguo-zhouwei:MZBannerView:v2.0.2'
    implementation 'com.github.franmontiel:PersistentCookieJar:v1.0.1'
    /** kotlin-dialog **/
    implementation 'com.afollestad.material-dialogs:core:3.3.0'
    implementation 'q.rorbin:VerticalTabLayout:1.2.5'
    /** 高斯模糊**/
    implementation 'com.github.pinguo-zhouwei:EasyBlur:v1.0.0'
    /** glide 圆角，模糊，透明等 **/
    implementation 'jp.wasabeef:glide-transformations:4.1.0'
    // If you want to use the GPU Filters
    implementation 'jp.co.cyberagent.android:gpuimage:2.0.4'
    /**圆角，背景，状态选择等*/
    implementation 'com.noober.background:core:1.6.2'
    /** 圆角图片 **/
    implementation 'de.hdodenhof:circleimageview:3.1.0'
    /** 知乎图片选择*/
    implementation 'com.zhihu.android:matisse:0.5.3-beta3'
    implementation 'com.squareup.picasso:picasso:2.71828'
    /** 微信登录**/
    implementation 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:+'
    /** 权限 **/
    implementation 'com.github.tbruyelle:rxpermissions:0.10.2'
    implementation 'com.permissionx.guolindev:permissionx:1.4.0'
    /** 高德地图 **/
    implementation 'com.amap.api:location:latest.integration'
    implementation 'com.amap.api:3dmap:latest.integration'
//    implementation 'com.amap.api:map2d:6.0.0' //2d
//    implementation 'com.amap.api:location:5.1.0' // 定位
//    implementation 'com.amap.api:search:7.3.0' //搜索
//    implementation 'com.amap.api:navi-3dmap:7.5.0_3dmap7.5.0' //导航
    /** 二维码及二维码扫描 **/
    def qrcode_version = '1.3.7'
    implementation "cn.bingoogolapple:bga-qrcode-zxing:$qrcode_version"
    implementation "cn.bingoogolapple:bga-qrcode-zbar:$qrcode_version"
    /** dialog **/
    //implementation 'com.afollestad.material-dialogs:core:3.1.1'
    /** 热修复 **/
//    implementation "com.android.support:multidex:1.0.1" // 多dex配置
//    implementation 'com.tencent.bugly:crashreport_upgrade:1.3.6'// 远程仓库集成方式（推荐）
//    implementation 'com.tencent.bugly:nativecrashreport:2.2.0'
//    implementation 'com.tencent.tinker:tinker-android-lib:1.9.14.7'
    /** 手绘风格drawable **/ //https://juejin.im/post/5df6d22be51d45580e58f422
    //implementation 'com.zylab:sketchy:0.1.3'

//    implementation 'me.drakeet.multitype:multitype:2.2.2'
    /**
     * blockcanary的核心原理是通过自定义一个Printer，设置到主线程ActivityThread的MainLooper中。MainLooper在dispatch消息前后都会调用Printer进行打印。从而获取前后执行的时间差值，判断是否超过设置的阈值。如果超过，则判定为卡顿。
     *
     * 作者：JunBin
     * 链接：https://juejin.im/post/5e62f28c6fb9a07cb96af9db
     * 来源：掘金
     * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
     * debugImplementation 'com.github.markzhai:blockcanary-android:1.5.0'
     * releaseImplementation 'com.github.markzhai:blockcanary-no-op:1.5.0'
     */
}
